let pokemonRepo = (() => {
  let e = [],
    t = "https://pokeapi.co/api/v2/pokemon?limit=800";
  function l() {
    return e;
  }
  function a(t) {
    Object.keys(t).includes("name") && Object.keys(t).includes("detailsUrl")
      ? e.push(t)
      : alert("incorrect data type");
  }
  function i(e, t) {
    e.addEventListener("click", () => {
      r(t);
    });
  }
  function n(e, t) {
    return fetch(e.detailsUrl)
      .then((e) => e.json())
      .then((l) => {
        t.innerHTML = `<p>${e.name.toUpperCase()}</p><img src="${
          l.sprites.front_default
        }">`;
      })
      .catch((e) => {
        console.log(e);
      });
  }
  function d(e) {
    let t = document.querySelector(".list-group.row");
    t.style.flexDirection = "row";
    let l = document.createElement("button");
    (l.innerText = e.name.toUpperCase()),
      n(e, l),
      l.setAttribute("type", "button"),
      l.setAttribute("data-toggle", "modal"),
      l.setAttribute("data-target", "#modal"),
      l.classList.add(
        "list-group-item",
        "col",
        "col-lg-3",
        "col-xl-auto",
        "btn.btn-info"
      ),
      t.appendChild(l),
      i(l, e);
  }
  function s() {
    return fetch(t)
      .then((e) => e.json())
      .then((e) => {
        e.results.forEach((e) => {
          a({ name: e.name, detailsUrl: e.url });
        });
      })
      .catch((e) => {
        console.log(e);
      });
  }
  function o(e) {
    return fetch(e.detailsUrl)
      .then((e) => e.json())
      .then((t) => {
        (e.imageUrl = t.sprites.front_default),
          (e.height = t.height),
          (e.types = t.types),
          (e.abilities = t.abilities);
      })
      .catch((e) => {
        alert("ERROR LOADING DETAILS");
      });
  }
  function r(e) {
    o(e).then(() => {
      let t = [],
        l = [];
      e.types.forEach((e) => {
        t.push(e.type.name);
      }),
        e.abilities.forEach((e) => {
          l.push(e.ability.name);
        });
      let a = document.querySelector("#modal");
      a.innerHTML = "";
      let i = document.createElement("div");
      i.classList.add("modal-dialog", "modal-dialog-centered"),
        i.setAttribute("role", "document"),
        a.appendChild(i);
      let n = document.createElement("div");
      n.classList.add("modal-content"), i.appendChild(n);
      let d = document.createElement("div");
      d.classList.add("modal-header"), n.appendChild(d);
      let s = document.createElement("h2");
      s.classList.add("modal-title"),
        (s.textContent = e.name.toUpperCase()),
        s.setAttribute("id", "modalLabel"),
        d.appendChild(s);
      let o = document.createElement("button");
      o.classList.add("close"),
        o.setAttribute("type", "button"),
        o.setAttribute("data-dismiss", "modal"),
        o.setAttribute("aria-label", "close"),
        d.appendChild(o);
      let r = document.createElement("span");
      r.setAttribute("aria-hidden", "true"),
        (r.innerText = "x"),
        o.appendChild(r);
      let c = document.createElement("img");
      c.src = `${e.imageUrl}`;
      let p = document.createElement("div");
      p.classList.add("modal-body"), n.appendChild(p);
      let m = document.createElement("div");
      m.classList.add("container"), p.appendChild(m);
      let u = document.createElement("div");
      u.classList.add("row");
      let h = document.createElement("div");
      h.classList.add("row"), m.appendChild(u), m.appendChild(h);
      let b = document.createElement("div");
      b.classList.add("col"),
        (b.style.backgroundColor = ""),
        (b.style.textAlign = "center"),
        u.appendChild(b);
      let L = document.createElement("div");
      L.classList.add("col"),
        (L.style.alignSelf = "center"),
        h.appendChild(L),
        (b.innerHTML = `<img width='150px' src="${c.src}"></img>`);
      let g = document.createElement("div");
      g.classList.add("modal-footer");
      let E = document.createElement("button");
      E.setAttribute("type", "button"),
        E.setAttribute("data-dismiss", "modal"),
        E.classList.add("btn", "btn-info"),
        (E.innerText = "Close"),
        n.appendChild(g),
        g.appendChild(E),
        (L.innerHTML = `Height: ${e.height}<br>Types: ${t.join(
          ", "
        )}<br>Abilities: ${l.join(", ")}`);
    });
  }
  return { getAll: l, addListItem: d, loadList: s };
})();
pokemonRepo.loadList().then(() => {
  pokemonRepo.getAll().forEach((e) => {
    pokemonRepo.addListItem(e);
  });
});
